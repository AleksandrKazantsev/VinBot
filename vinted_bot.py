import os
import requests
import asyncio
from telegram import Bot
from telegram.ext import Application, CommandHandler

# ---- –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ —Ç–∞ chat_id –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ----
TOKEN = os.environ["TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----
CHECK_INTERVAL = 60  # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SEARCH_QUERIES = {}  # —Å–ª–æ–≤–Ω–∏–∫ {–∑–∞–ø–∏—Ç: id_–æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ_—Ç–æ–≤–∞—Ä—É}

bot = Bot(token=TOKEN)


# ---- –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –Ω–∞ Vinted ----
def search_vinted(query: str):
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –Ω–∞ Vinted API"""
    url = "https://www.vinted.it/api/v2/catalog/items"
    params = {"search_text": query, "per_page": 1, "order": "newest_first"}

    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data.get("items", [])
    except Exception as e:
        print(f"[ERROR] search_vinted: {e}")
        return []


# ---- Telegram –∫–æ–º–∞–Ω–¥–∏ ----
async def add_query(update, context):
    """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç"""
    if not context.args:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add <–∑–∞–ø–∏—Ç>")
        return
    query = " ".join(context.args)
    SEARCH_QUERIES[query] = None
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ—à—É–∫: {query}")


async def list_queries(update, context):
    """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—à—É–∫—ñ–≤"""
    if not SEARCH_QUERIES:
        await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    queries = "\n".join(SEARCH_QUERIES.keys())
    await update.message.reply_text(f"üîç –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ—à—É–∫–∏:\n{queries}")


async def remove_query(update, context):
    """–í–∏–¥–∞–ª—è—î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç"""
    if not context.args:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove <–∑–∞–ø–∏—Ç>")
        return
    query = " ".join(context.args)
    if query in SEARCH_QUERIES:
        del SEARCH_QUERIES[query]
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ—à—É–∫: {query}")
    else:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ—à—É–∫—É –Ω–µ–º–∞.")


# ---- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ----
async def check_new_items():
    """–§–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
    while True:
        for query in list(SEARCH_QUERIES.keys()):
            items = search_vinted(query)
            if items:
                latest_item = items[0]
                last_id = SEARCH_QUERIES[query]
                if last_id != latest_item["id"]:
                    SEARCH_QUERIES[query] = latest_item["id"]

                    msg = (
                        f"üÜï {latest_item['title']}\n"
                        f"üí∞ {latest_item['price']}‚Ç¨\n"
                        f"üîó https://www.vinted.it{latest_item['path']}"
                    )
                    try:
                        await bot.send_message(chat_id=CHAT_ID, text=msg)
                    except Exception as e:
                        print(f"[ERROR] send_message: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


# ---- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ----
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("add", add_query))
    app.add_handler(CommandHandler("list", list_queries))
    app.add_handler(CommandHandler("remove", remove_query))

    loop = asyncio.get_event_loop()
    loop.create_task(check_new_items())

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()


if __name__ == "__main__":
    main()
